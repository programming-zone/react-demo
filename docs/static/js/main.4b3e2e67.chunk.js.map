{"version":3,"sources":["navbar.js","counter.js","Counters.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","value","this","props","counter","classes","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","id","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAceA,G,MAZA,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACb,OACI,yBAAKC,UAAU,gCACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UACO,0BAAMD,UAAU,oCAClBD,OCmBFG,E,4KAtBK,IACJC,EAASC,KAAKC,MAAMC,QAApBH,MACP,OAAiB,IAAVA,EAAc,OAASA,I,wCAG/B,IAAII,EAAU,mBAEd,OADAA,GAAwC,IAA7BH,KAAKC,MAAMC,QAAQH,MAAc,UAAY,Y,+BAIlD,IAAD,OAEL,OACI,6BACI,0BAAMH,UAAWI,KAAKI,mBAAoBJ,KAAKK,eAC/C,4BAAQT,UAAU,2BAA2BU,QAAS,kBAAM,EAAKL,MAAMM,YAAY,EAAKN,MAAMC,WAA9F,aACA,4BAAQN,UAAU,4BAA4BU,QAAS,kBAAM,EAAKL,MAAMO,SAAS,EAAKP,MAAMC,QAAQO,MAApG,e,GAlBMC,aCoBPC,E,uKAjBH,IAAD,EACyCX,KAAKC,MAA9CW,EADA,EACAA,QAAQC,EADR,EACQA,SAASL,EADjB,EACiBA,SAASD,EAD1B,EAC0BA,YACjC,OACA,6BACE,4BAAQX,UAAU,6BAA6BU,QAASM,GAAxD,SACCC,EAASC,KAAI,SAAAZ,GAAO,OACnB,kBAAC,EAAD,CACAa,IAAKb,EAAQO,GACbD,SAAUA,EACVD,YAAaA,EACbL,QAASA,Y,GAZMQ,aCiDRM,E,4MA9CbC,MAAQ,CACNJ,SAAU,CACR,CAAEJ,GAAI,EAAGV,MAAO,GAChB,CAAEU,GAAI,EAAGV,MAAO,GAChB,CAAEU,GAAI,EAAGV,MAAO,GAChB,CAAEU,GAAI,EAAGV,MAAO,K,EAGnBmB,gBAAkB,SAAChB,GACjB,IAAMW,EAAQ,YAAM,EAAKI,MAAMJ,UACzBM,EAAQN,EAASO,QAAQlB,GAC/BW,EAASM,GAAT,eAAsBjB,GACtBW,EAASM,GAAOpB,QAChB,EAAKsB,SAAS,CAACR,c,EAEjBS,YAAc,WACZ,IAAMT,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAAAS,GAEvC,OADAA,EAAExB,MAAO,EACFwB,KAET,EAAKF,SAAS,CAACR,c,EAGjBW,aAAe,SAACC,GACd,IAAMZ,EAAW,EAAKI,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAIA,EAAEd,KAAOgB,KAC1D,EAAKJ,SAAS,CAACR,c,uDAIhB,OACE,kBAAC,IAAMc,SAAP,KACA,kBAAC,EAAD,CACAhC,cAAiBK,KAAKiB,MAAMJ,SAASa,QAAO,SAAAH,GAAC,OAAGA,EAAExB,MAAQ,KAAG6B,SAE7D,0BAAMhC,UAAU,aACd,kBAAC,EAAD,CACAiB,SAAUb,KAAKiB,MAAMJ,SACrBD,QAASZ,KAAKsB,YACdf,YAAaP,KAAKkB,gBAClBV,SAAUR,KAAKwB,qB,GAxCLd,a,MCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4b3e2e67.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavBar = ({totalCounters}) => {\n    return ( \n        <nav className=\"navbar navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"#\">\n            Navbar <span className=\"badge badge-pill badge-secondary\">\n                {totalCounters}\n            </span>\n            </a>\n        </nav>\n     );\n}\n \nexport default NavBar;","import React, { Component } from 'react';\n\nclass Counter extends Component {\n\n     formatCount() {\n         const {value} = this.props.counter;\n         return value === 0 ? \"Zero\" : value;\n     };\n     getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n        return classes;\n     }\n\n    render() { \n\n        return ( \n            <div>\n                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n                <button className=\"btn btn-secondary byn-sm\" onClick={() => this.props.onIncrement(this.props.counter)}>Increment</button>\n                <button className=\"btn btn-danger btn-sm m-2\" onClick={() => this.props.onDelete(this.props.counter.id)} >Delete</button>\n            </div>\n         );\n    }\n}\n \nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter';\n\nclass Counters extends Component {\n\n  render() { \n    const {onReset,counters,onDelete,onIncrement} = this.props;\n    return ( \n    <div>\n      <button className=\"btn btn-primary btn-sm m-2\" onClick={onReset}>Reset</button>\n      {counters.map(counter => (\n        <Counter \n        key={counter.id}  \n        onDelete={onDelete}\n        onIncrement={onIncrement}\n        counter={counter} />\n      ))}\n    </div>\n     );\n  }\n}\n \nexport default Counters;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './navbar';\nimport Counters from './Counters';\n\nclass App extends Component {\n  state = { \n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ]\n   }\n   handleIncrement = (counter) => {\n     const counters =[...this.state.counters];\n     const index = counters.indexOf(counter);\n     counters[index] = {...counter};\n     counters[index].value++;\n     this.setState({counters});\n   };\n   handleReset = () => {\n     const counters = this.state.counters.map(c => {\n       c.value =0;\n       return c;\n     });\n     this.setState({counters});\n   };\n\n   handleDelete = (counterId) => {\n     const counters = this.state.counters.filter(c => c.id !== counterId);\n     this.setState({counters});\n   };\n\n  render() { \n    return (\n      <React.Fragment>\n      <NavBar \n      totalCounters = {this.state.counters.filter(c=> c.value > 0).length} \n       />\n      <main className=\"container\">\n        <Counters \n        counters={this.state.counters}\n        onReset={this.handleReset}\n        onIncrement={this.handleIncrement}\n        onDelete={this.handleDelete} />\n      </main>\n      </React.Fragment> \n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}